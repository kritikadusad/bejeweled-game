{"ast":null,"code":"var _jsxFileName = \"/Users/kritika/src/bejeweled/src/Board.js\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); //Bindings:\n\n    this.randomJewel = this.randomJewel.bind(this);\n    this.emptyGrid = this.emptyGrid.bind(this);\n  }\n\n  emptyGrid() {\n    console.log(\"hello\");\n    let grid = [];\n\n    for (let i = 0; i < 9; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < 9; j++) {\n        grid[i][j] = [];\n      }\n    }\n\n    console.log(grid);\n  }\n\n  randomJewel() {\n    //For now, jewels are represented as numbers between 1 and 7.\n    const jewels = [1, 2, 3, 4, 5, 6, 7];\n    return jewels[Math.floor(jewels.length * Math.random())];\n  }\n\n  render() {\n    let gridDiv = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }); //let grid = [1,1,2,3];\n\n    let grid = this.emptyGrid();\n    gridDiv = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, grid.map(index => React.createElement(React.Fragment, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Cell, {\n      jewel: this.randomJewel(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }))));\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, gridDiv, React.createElement(\"button\", {\n      className: \"reset-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Reset\"));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/kritika/src/bejeweled/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","randomJewel","bind","emptyGrid","console","log","grid","i","j","jewels","Math","floor","length","random","render","gridDiv","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC5BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN,EADc,CAEd;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,SAAL,GAAgB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAhB;AACH;;AACGC,EAAAA,SAAS,GAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACE,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACvBD,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAU,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACvBF,QAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQC,CAAR,IAAa,EAAb;AACH;AACJ;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACH;;AACDL,EAAAA,WAAW,GAAG;AACV;AACA,UAAMQ,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAf;AACA,WAAOA,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWF,MAAM,CAACG,MAAP,GAAgBF,IAAI,CAACG,MAAL,EAA3B,CAAD,CAAb;AACH;;AAELC,EAAAA,MAAM,GAAG;AACP,QAAIC,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd,CADO,CAEP;;AACA,QAAIT,IAAI,GAAG,KAAKH,SAAL,EAAX;AACAY,IAAAA,OAAO,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMT,IAAI,CAACU,GAAL,CAAUC,KAAD,IACP,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAGA,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAE,IAAF;AAAO,MAAA,KAAK,EAAG,KAAKhB,WAAL,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADF,CADN,CADJ;AASA,WACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMc,OADN,EAEI;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CADJ;AAMD;;AA3C2B;;AA8C9B,eAAejB,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n  constructor(props){\n      super(props);\n      //Bindings:\n      this.randomJewel = this.randomJewel.bind(this)\n      this.emptyGrid= this.emptyGrid.bind(this)\n  }\n      emptyGrid () {\n        console.log(\"hello\")\n          let grid = [];\n          for (let i = 0; i < 9; i++){\n              grid[i] = [];\n              for (let j = 0; j < 9; j++){\n                  grid[i][j] = [];\n              }\n          }\n          console.log(grid)\n      }\n      randomJewel() {\n          //For now, jewels are represented as numbers between 1 and 7.\n          const jewels = [1, 2, 3, 4, 5, 6, 7];\n          return jewels[Math.floor(jewels.length * Math.random())];\n      }\n     \n  render() {\n    let gridDiv = <div />\n    //let grid = [1,1,2,3];\n    let grid = this.emptyGrid();  \n    gridDiv = \n        <div>        \n            { grid.map((index)=> (\n                <React.Fragment key={ index }>\n                    < Cell jewel={ this.randomJewel() } />\n                </React.Fragment> \n                ))   \n            }   \n        </div>;\n    return (\n        <div className=\"board\">\n            { gridDiv }\n            <button className=\"reset-button\">Reset</button>    \n        </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}