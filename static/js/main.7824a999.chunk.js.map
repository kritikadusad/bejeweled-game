{"version":3,"sources":["Cell.js","Board.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","game","react_default","a","createElement","className","1","2","3","4","5","6","7","jewel","Component","jewels","Board","generateJewel","bind","assertThisInitialized","createGrid","jewelRemove","countSameAdjacent","checkGrid","checkMovePossible","checkAdjacentCells","arr","Math","floor","length","random","newJewel","adjacentJewel1","adjacentJewel2","filter","ele","grid","i","j","filteredArr","setState","cell","count","console","log","resetGame","boardGrid","gridDiv","board","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","err","return","map","key","shortid","generate","src_Cell","onClick","ReactDOM","render","src_Board_0","document","getElementById"],"mappings":"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","file":"static/js/main.7824a999.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import './Cell.css';\n\nclass Cell extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            game : []\n        }\n        //Bindings:\n    }\n    render() {\n        const colorDict = { \n            1: \"white\",\n            2: \"pink\",\n            3: \"blue\",\n            4: \"red\",\n            5: \"yellow\",\n            6: \"purple\",\n            7: \"aqua\"\n        };\n                \n        return (\n            <div className = {colorDict[this.props.jewel]}>\n                \"\"\n            </div>\n            );\n    }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell.js';\nimport './Board.css';\nimport shortid from 'shortid';\nconst jewels = [1, 2, 3, 4, 5, 6, 7];\nclass Board extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            game : []\n        }\n        //Bindings:\n        this.generateJewel = this.generateJewel.bind(this)\n        this.createGrid = this.createGrid.bind(this)\n        this.jewelRemove = this.jewelRemove.bind(this)\n        this.countSameAdjacent = this.countSameAdjacent.bind(this)\n        this.checkGrid = this.checkGrid.bind(this)\n        this.checkMovePossible = this.checkMovePossible.bind(this)\n        this.checkAdjacentCells = this.checkAdjacentCells.bind(this)\n    }\n    generateJewel(arr) {\n          //For now, jewels are represented as numbers between 1 and 7.\n          return arr[Math.floor(arr.length * Math.random())];\n    }\n    checkAdjacentCells( newJewel, adjacentJewel1, adjacentJewel2 ){\n        if (newJewel === adjacentJewel1 && adjacentJewel1 === adjacentJewel2) {\n                return true\n            } \n        return false\n    }\n    jewelRemove(arr, jewel) {\n       return arr.filter(function(ele){\n          return ele !== jewel;\n       });\n    }\n    createGrid(arr) {\n    let grid = [];\n    // Making a 8x8 grid \n        for (let i = 0; i < 8; i++){\n            grid[i] = [];\n            for (let j = 0; j < 8; j++){\n                let newJewel = this.generateJewel(arr);\n                if (i > 1) {\n                    let sameCell = this.checkAdjacentCells(newJewel, grid[i-1][j] , grid[i-2][j]);\n                    //console.log(newJewel, grid[i-1][j], grid[i-2][j],sameCell)\n                    if (sameCell) {\n                        let filteredArr = this.jewelRemove(arr, newJewel)\n                       // console.log(filteredArr)\n                        newJewel = this.generateJewel(filteredArr);\n                       // console.log(newJewel)\n                    }\n                }\n                if (j > 1) {\n                    let sameCell = this.checkAdjacentCells(newJewel, grid[i][j-1] , grid[i][j-1]);\n                    //console.log(sameCell)\n                    if (sameCell) {\n                        let filteredArr = this.jewelRemove(arr, newJewel) \n                        newJewel = this.generateJewel(filteredArr);\n                    }\n                }\n                grid[i][j] = newJewel;\n            }\n        }\n        return grid\n    }\n\n    resetGame () {\n        this.setState( { game: [] })\n    } \n\n    countSameAdjacent( cell, i, j, grid){\n        let count = 0;\n        //Check cell above the given cell position\n        if ( i >= 1 && cell === grid[i-1][j] ){\n            count++;\n            }\n        //Check cell below the given cell position\n        if (i <= 6 && cell === grid[i+1][j] ){\n            console.log(i, i-1)\n            count++;\n            }\n        //Check cell on the left of the given cell position\n        if (j>= 1 && cell === grid[i][j-1] ){\n            count++;\n            }\n        //Check cell on the right of the given cell position\n        if (j <= 6 && cell === grid[i][j+1] ){\n            count++;\n            }\n        return count\n    }\n    \n    \n    checkMovePossible(i,j, grid){\n        const cell = grid[i][j]\n        //Check if 2 cells above the given cell position\n        if (i >= 2 && cell === grid[i-1][j]) {\n           const count = this.countSameAdjacent(cell, i-2, j, grid)\n            if (count >= 2){\n                return true\n            }\n        }\n        //Check if 2 cells below the given cell position\n        if (i <= 5 && cell === grid[i+1][j]) {\n            const count = this.countSameAdjacent(cell, i+2, j, grid)\n            if (count >= 2){\n                return true\n            }\n        }\n        //Check if 2 cells left of the given cell position\n        if (j >= 2 && cell === grid[i][j-1]) {\n            if (this.countSameAdjacent(cell, i, j-2, grid) >= 2){\n                return true\n            }\n        }\n        //Check if 2 cells right of the given cell position\n        if (j <= 5 && cell === grid[i][j+1]) {\n            const count = this.countSameAdjacent(cell, i, j+2, grid)\n            if (count >= 2){\n                return true\n            }\n        }\n    }\n\n\n\n   //Check if grid has at least one possible move. If not, reset the game. \n    checkGrid(grid){\n        for (let i = 0; i < 8; i++){\n            for (let j = 0; j < 8; j++){\n                if (this.checkMovePossible(i, j, grid)){\n                    return true\n                }\n            }\n        }\n        this.resetGame()\n    }    \n    render() {\n        const boardGrid = this.createGrid(jewels)\n        //console.log(boardGrid)\n        this.checkGrid(boardGrid)\n        let gridDiv = <div/>;\n        let board = [];\n        for ( let row of boardGrid ){\n            for ( let jewel of  row) {\n                board.push(jewel) ;   \n            }    \n        gridDiv  = \n            <div className=\"grid-container\">\n                {board.map(\n                    jewel=> \n                        <div className = \"grid-item\" key={ shortid.generate() }>\n                             <Cell jewel = { jewel } />\n                        </div>\n                )}\n            </div>  \n        }\n\n        return (\n            <div className = \"board\">\n                <h3> Lets play Bejeweled!</h3>\n                {gridDiv}\n                <button className=\"reset-button\" onClick = { this.resetGame.bind(this) }>Reset</button>    \n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n"],"sourceRoot":""}