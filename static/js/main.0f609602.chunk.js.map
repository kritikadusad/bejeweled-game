{"version":3,"sources":["Cell.js","Board.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","game","react_default","a","createElement","className","1","2","3","4","5","6","7","jewel","Component","jewels","Board","generateJewel","bind","assertThisInitialized","createGrid","jewelRemove","countSameAdjacent","checkGrid","checkMovePossible","checkSameJewelsAndRemove","arr","Math","floor","length","random","adjacentJewel1","adjacentJewel2","filter","ele","arr_input","grid","i","j","Array","from","newJewel","setState","cell","count","resetGame","boardGrid","gridDiv","board","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","err","return","map","key","shortid","generate","src_Cell","onClick","ReactDOM","render","src_Board_0","document","getElementById"],"mappings":"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","file":"static/js/main.0f609602.chunk.js","sourcesContent":["// @format\nimport React, {Component} from 'react';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: [],\n    };\n  }\n  render() {\n    const colorDict = {\n      1: 'white',\n      2: 'pink',\n      3: 'blue',\n      4: 'red',\n      5: 'yellow',\n      6: 'purple',\n      7: 'aqua',\n    };\n\n    return <div className={colorDict[this.props.jewel]}>\"\"</div>;\n  }\n}\n\nexport default Cell;\n","// @format\nimport React, {Component} from 'react';\nimport Cell from './Cell.js';\nimport './Board.css';\nimport shortid from 'shortid';\nconst jewels = [1, 2, 3, 4, 5, 6, 7];\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: [],\n    };\n    // Bindings:\n    this.generateJewel = this.generateJewel.bind(this);\n    this.createGrid = this.createGrid.bind(this);\n    this.jewelRemove = this.jewelRemove.bind(this);\n    this.countSameAdjacent = this.countSameAdjacent.bind(this);\n    this.checkGrid = this.checkGrid.bind(this);\n    this.checkMovePossible = this.checkMovePossible.bind(this);\n    this.checkSameJewelsAndRemove = this.checkSameJewelsAndRemove.bind(this);\n  }\n  generateJewel(arr) {\n    // For now, jewels are represented as numbers between 1 and 7.\n    return arr[Math.floor(arr.length * Math.random())];\n  }\n  checkSameJewelsAndRemove(arr, adjacentJewel1, adjacentJewel2) {\n    if (adjacentJewel1 === adjacentJewel2) {\n      return this.jewelRemove(arr, adjacentJewel1);\n    }\n    return arr;\n  }\n  jewelRemove(arr, jewel) {\n    return arr.filter(function(ele) {\n      return ele !== jewel;\n    });\n  }\n  createGrid(arr_input) {\n    let grid = [];\n    // Making an 8x8 grid\n    for (let i = 0; i < 8; i++) {\n      grid[i] = [];\n      for (let j = 0; j < 8; j++) {\n        let arr = Array.from(arr_input);\n        if (i > 1) {\n          arr = this.checkSameJewelsAndRemove(\n            arr,\n            grid[i - 1][j],\n            grid[i - 2][j],\n          );\n        }\n        if (j > 1) {\n          arr = this.checkSameJewelsAndRemove(\n            arr,\n            grid[i][j - 1],\n            grid[i][j - 2],\n          );\n        }\n        let newJewel = this.generateJewel(arr);\n        grid[i][j] = newJewel;\n      }\n    }\n    return grid;\n  }\n\n  resetGame() {\n    this.setState({game: []});\n  }\n\n  countSameAdjacent(cell, i, j, grid) {\n    let count = 0;\n    //Check cell above the given cell position\n    if (i >= 1 && cell === grid[i - 1][j]) {\n      count++;\n    }\n    //Check cell below the given cell position\n    if (i <= 6 && cell === grid[i + 1][j]) {\n      count++;\n    }\n    //Check cell on the left of the given cell position\n    if (j >= 1 && cell === grid[i][j - 1]) {\n      count++;\n    }\n    //Check cell on the right of the given cell position\n    if (j <= 6 && cell === grid[i][j + 1]) {\n      count++;\n    }\n    return count;\n  }\n\n  checkMovePossible(i, j, grid) {\n    const cell = grid[i][j];\n    //Check if 2 cells above the given cell position\n    if (i >= 2 && cell === grid[i - 1][j]) {\n      const count = this.countSameAdjacent(cell, i - 2, j, grid);\n      if (count >= 2) {\n        return true;\n      }\n    }\n    //Check if 2 cells below the given cell position\n    if (i <= 5 && cell === grid[i + 1][j]) {\n      const count = this.countSameAdjacent(cell, i + 2, j, grid);\n      if (count >= 2) {\n        return true;\n      }\n    }\n    //Check if 2 cells left of the given cell position\n    if (j >= 2 && cell === grid[i][j - 1]) {\n      if (this.countSameAdjacent(cell, i, j - 2, grid) >= 2) {\n        return true;\n      }\n    }\n    //Check if 2 cells right of the given cell position\n    if (j <= 5 && cell === grid[i][j + 1]) {\n      const count = this.countSameAdjacent(cell, i, j + 2, grid);\n      if (count >= 2) {\n        return true;\n      }\n    }\n  }\n\n  //Check if grid has at least one possible move. If not, reset the game.\n  checkGrid(grid) {\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        if (this.checkMovePossible(i, j, grid)) {\n          return true;\n        }\n      }\n    }\n    this.resetGame();\n  }\n  render() {\n    const boardGrid = this.createGrid(jewels);\n    this.checkGrid(boardGrid);\n    let gridDiv = <div />;\n    let board = [];\n    for (let row of boardGrid) {\n      for (let jewel of row) {\n        board.push(jewel);\n      }\n      gridDiv = (\n        <div className=\"grid-container\">\n          {board.map(jewel => (\n            <div className=\"grid-item\" key={shortid.generate()}>\n              <Cell jewel={jewel} />\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"board\">\n        <h3> Lets play Bejeweled!</h3>\n        {gridDiv}\n        <button className=\"reset-button\" onClick={this.resetGame.bind(this)}>\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","// @format\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n"],"sourceRoot":""}